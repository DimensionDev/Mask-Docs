"use strict";(self.webpackChunkmask_docs=self.webpackChunkmask_docs||[]).push([[928],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var c=2;c<l;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4812:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return m}});var a=t(7462),i=t(3366),l=(t(7294),t(3905)),o=["components"],r={title:"Connection",sidebar_position:3},s=void 0,c={unversionedId:"web3/connection",id:"web3/connection",title:"Connection",description:"To participate in the network, we need to send requests and receive responses from a node in the network. We have tools like ethers.js, web3.js and FCL helps to compose request payloads and decode responses.",source:"@site/docs/web3/connection.md",sourceDirName:"web3",slug:"/web3/connection",permalink:"/docs/web3/connection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web3/connection.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Connection",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"States",permalink:"/docs/web3/web3-state"},next:{title:"Provider",permalink:"/docs/web3/provider"}},p={},m=[{value:"Overview",id:"overview",level:3},{value:"Options",id:"options",level:3},{value:"Usage",id:"usage",level:2},{value:"getWeb3",id:"getweb3",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"getWeb3Provider",id:"getweb3provider",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"connect",id:"connect",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"disconnect",id:"disconnect",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"getGasPrice",id:"getgasprice",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"getTokenSchema",id:"gettokenschema",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"getNativeToken",id:"getnativetoken",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"getFungibleToken",id:"getfungibletoken",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"getNonFungibleToken",id:"getnonfungibletoken",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"getNonFungibleTokenOwnership",id:"getnonfungibletokenownership",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"getNonFungibleTokenMetadata",id:"getnonfungibletokenmetadata",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"getNonFungibleTokenContract",id:"getnonfungibletokencontract",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-11",level:4},{value:"getNonFungibleTokenCollection",id:"getnonfungibletokencollection",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example",id:"example-12",level:4},{value:"getNativeTokenBalance",id:"getnativetokenbalance",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-13",level:4},{value:"getFungibleTokenBalance",id:"getfungibletokenbalance",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example",id:"example-14",level:4},{value:"getNonFungibleTokenBalance",id:"getnonfungibletokenbalance",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example",id:"example-15",level:4},{value:"getFungibleTokensBalance",id:"getfungibletokensbalance",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Example",id:"example-16",level:4},{value:"getNonFungibleTokensBalance",id:"getnonfungibletokensbalance",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Example",id:"example-17",level:4},{value:"getAccount",id:"getaccount",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Example",id:"example-18",level:4},{value:"getChainId",id:"getchainid",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Example",id:"example-19",level:4},{value:"getBlock",id:"getblock",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Example",id:"example-20",level:4},{value:"getBlockNumber",id:"getblocknumber",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Example",id:"example-21",level:4},{value:"getBlockTimestamp",id:"getblocktimestamp",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Example",id:"example-22",level:4},{value:"getBalance",id:"getbalance",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Example",id:"example-23",level:4},{value:"getTransaction",id:"gettransaction",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Example",id:"example-24",level:4},{value:"getTransactionStatus",id:"gettransactionstatus",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Example",id:"example-25",level:4},{value:"getTransactionNonce",id:"gettransactionnonce",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Example",id:"example-26",level:4},{value:"getTransactionReceipt",id:"gettransactionreceipt",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Example",id:"example-27",level:4},{value:"getCode",id:"getcode",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Example",id:"example-28",level:4},{value:"switchChain",id:"switchchain",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Example",id:"example-29",level:4},{value:"signMessage",id:"signmessage",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Example",id:"example-30",level:4},{value:"verifyMessage",id:"verifymessage",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Example",id:"example-31",level:4},{value:"transferFungibleToken",id:"transferfungibletoken",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Example",id:"example-32",level:4},{value:"transferNonFungibleToken",id:"transfernonfungibletoken",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Example",id:"example-33",level:4},{value:"signTransaction",id:"signtransaction",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Example",id:"example-34",level:4},{value:"signTransactions",id:"signtransactions",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Example",id:"example-35",level:4},{value:"callTransaction",id:"calltransaction",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Example",id:"example-36",level:4},{value:"sendTransaction",id:"sendtransaction",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Example",id:"example-37",level:4},{value:"sendSignedTransaction",id:"sendsignedtransaction",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Example",id:"example-38",level:4},{value:"replaceTransaction",id:"replacetransaction",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Example",id:"example-39",level:4},{value:"cancelTransaction",id:"canceltransaction",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Example",id:"example-40",level:4}],u={toc:m};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"To participate in the network, we need to send requests and receive responses from a node in the network. We have tools like ",(0,l.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},(0,l.kt)("inlineCode",{parentName:"a"},"ethers.js")),", ",(0,l.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/"},(0,l.kt)("inlineCode",{parentName:"a"},"web3.js"))," and ",(0,l.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/"},(0,l.kt)("inlineCode",{parentName:"a"},"FCL"))," helps to compose request payloads and decode responses."),(0,l.kt)("h3",{id:"overview"},"Overview"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ConnectionState")," defines the ability to interact with a blockchain network."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface ConnectionState {\n    /** Get web3 SDK instance */\n    getWeb3?: (initial?: Web3ConnectionOptions) => Promise<Web3>\n    /** Get web3 provider instance */\n    getWeb3Provider?: (initial?: Web3ConnectionOptions) => Promise<Web3Provider>\n    /** Get connection */\n    getConnection?: (initial?: Web3ConnectionOptions) => Promise<Web3Connection>\n}\n")),(0,l.kt)("p",null,"The primary task of this state is to implement a ",(0,l.kt)("inlineCode",{parentName:"p"},"Connection")," for the network. It describes the commonality of a network to be adopted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface Connection {\n    /** Get the web3 SDK instance. */\n    getWeb3(initial?: Web3ConnectionOptions): Promise<Web3>\n    /** Get the latest block number. */\n    getBlockNumber(initial?: Web3ConnectionOptions): Promise<number>\n    /** Sign message */\n    signMessage(dataToSign: string, signType?: string, initial?: Web3ConnectionOptions): Promise<Signature>\n    /** Send a transaction and wait for mining */\n    sendTransaction(transaction: Transaction, initial?: Web3ConnectionOptions): Promise<string>\n    /** Build connection */\n    connect(initial?: Web3ConnectionOptions): Promise<Account<ChainId>>\n}\n")),(0,l.kt)("p",null,"With a ",(0,l.kt)("inlineCode",{parentName:"p"},"Connection"),", we can do:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"To create an SDK instance.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"To get the instant block number.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"To sign a plain message.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"To send a transaction and wait for confirmation.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"To connect to a wallet provider."))),(0,l.kt)("p",null,"In the UI components, we use ",(0,l.kt)("inlineCode",{parentName:"p"},"useWeb3Connection")," to access the connection of a specific network."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const signature = await connection.signMessage(/* ... */)\n")),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"We could alter the connection with the ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," parameter in actions. It gives us the chance to override the current connection settings."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"interface ConnectionOptions<ChainId, ProviderType, Transaction> {\n    /** Designate the sub-network id of the transaction. */\n    chainId?: ChainId\n    /** Designate the signer of the transaction. */\n    account?: string\n    /** Designate the provider to handle the transaction. */\n    providerType?: ProviderType\n    /** Fragments to merge into the transaction. */\n    overrides?: Partial<Transaction>\n}\n")),(0,l.kt)("p",null,"To override settings in the connection scope, take ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," as the last parameter of the ",(0,l.kt)("inlineCode",{parentName:"p"},"useWeb3Connection")," hook. It will alter every invocation on the connection."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const connection = useWeb3Connection(NetworkPluginID.PLUGIN_EVM, {\n    // all invocation on the connection will send to polygon network\n    chainId: ChainId.Polygon,\n})\n\n// fetch the instant block number of polygon network\nconst blockNumber = connection.getBlockNumber()\n\n// fetch the instant balance of address on polygon network\nconst balance = connection.getBalance(address)\n")),(0,l.kt)("p",null,"Moreover, each method accepts ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," as the last parameter, overriding settings for that invocation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const connection = useWeb3Connection(NetworkPluginID.PLUGIN_EVM)\n\n// fetch the instant block number of polygon network\nconst blockNumber = connection.getBlockNumber({\n    // only this invocation gets an alteration\n    chainId: ChainId.Polygon,\n})\n\n// fetch the instant balance of address on the currently selected network (might not polygon network)\nconst balance = connection.getBalance(address)\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"getweb3"},"getWeb3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const web3 = await connection.getWeb3([options])\n")),(0,l.kt)("p",null,"Get Web3 SDK instance of the currently selected network."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Web3>")," - The Web3 SDK instance."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// get web3js instance\nconst connection = useWeb3Connection(NetworkPluginID.PLUGIN_EVM)\n\nconst getWeb3 = useCallback(() => {\n    const web3 = await connection.getWeb3()\n\n    // learn more: https://web3js.readthedocs.io/\n    await web3.eth.callTransaction(/* ... */)\n}, [connection])\n\n// get solana SDK instance\nconst solanaConnection = useWeb3Connection(NetworkPluginID.PLUGIN_SOLANA)\n\nconst getSolanaWeb3 = useCallback(() => {\n    const web3 = await connection.getWeb3()\n\n    // learn more: https://docs.solana.com/developing/clients/javascript-reference\n    const connection = new web3.Connection(/* ... */)\n    const slot = await connection.getSlot()\n}, [connection])\n")),(0,l.kt)("h3",{id:"getweb3provider"},"getWeb3Provider"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getWeb3Provider(initial?: Web3ConnectionOptions): Promise<Web3Provider>\n")),(0,l.kt)("p",null,"Get the internal web3 provider instance which is the fundamental description of a wallet provider. A network might define a wallet protocol. E.g., ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1193"},"https://eips.ethereum.org/EIPS/eip-1193"),"."),(0,l.kt)("p",null,"For the network that doesn't have a provider protocol, we borrow the definition from the market leader wallet. E.g., ",(0,l.kt)("a",{parentName:"p",href:"https://docs.phantom.app/integrating/extension-and-in-app-browser-web-apps/establishing-a-connection"},"https://docs.phantom.app/integrating/extension-and-in-app-browser-web-apps/establishing-a-connection"),"."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Web3Provider>")),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const provider = await connection.getWeb3Provider()\n\n// get the EIP1193 provider and send raw JSON RPC request with it\nprovider.request({\n    id: 0,\n    jsonrpc: '2.0',\n    method: 'eth_getBalance',\n    params: ['0x...'],\n})\n")),(0,l.kt)("h3",{id:"connect"},"connect"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"connect(initial?: Web3ConnectionOptions): Promise<Account<ChainId>>\n")),(0,l.kt)("p",null,"Build connection."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Account<ChainId>>")," The account object contains the connected account address and sub-network chain id."),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const account = (await connection.connect()) > { account: '0x...', chainId: ChainId.Mainnet }\n")),(0,l.kt)("h3",{id:"disconnect"},"disconnect"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"disconnect(initial?: Web3ConnectionOptions): Promise<void>\n")),(0,l.kt)("p",null,"Break connection."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<void>")),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"await connection.disconnect()\n")),(0,l.kt)("h3",{id:"getgasprice"},"getGasPrice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getGasPrice(initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get gas price."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"gettokenschema"},"getTokenSchema"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getTokenSchema(address: string, initial?: Web3ConnectionOptions): Promise<SchemaType | undefined>\n")),(0,l.kt)("p",null,"Get schema type of given token address."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getnativetoken"},"getNativeToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNativeToken(initial?: Web3ConnectionOptions): Promise<FungibleToken<ChainId, SchemaType>>\n")),(0,l.kt)("p",null,"Get a native fungible token."),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getfungibletoken"},"getFungibleToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getFungibleToken(address: string, initial?: Web3ConnectionOptions): Promise<FungibleToken<ChainId, SchemaType>>\n")),(0,l.kt)("p",null,"Get a fungible token."),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("h4",{id:"example-7"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getnonfungibletoken"},"getNonFungibleToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleToken(\n    address: string,\n    tokenId: string,\n    schema?: SchemaType,\n    initial?: Web3ConnectionOptions,\n): Promise<NonFungibleToken<ChainId, SchemaType>>\n")),(0,l.kt)("p",null,"Get a non-fungible token."),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("h4",{id:"example-8"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getnonfungibletokenownership"},"getNonFungibleTokenOwnership"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleTokenOwnership(\n    address: string,\n    tokenId: string,\n    owner: string,\n    schema?: SchemaType,\n    initial?: Web3ConnectionOptions,\n): Promise<boolean>\n")),(0,l.kt)("p",null,"Detect if a non-fungible token is owned by a specific account."),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"address - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The token program address."),(0,l.kt)("li",{parentName:"ol"},"tokenId - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of the token."),(0,l.kt)("li",{parentName:"ol"},"owner - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The owner's address for detection"),(0,l.kt)("li",{parentName:"ol"},"schema - ",(0,l.kt)("inlineCode",{parentName:"li"},"SchemaType"),". An optional token schema type."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")),(0,l.kt)("h4",{id:"example-9"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const owner = '0x...'\nconst owned = await connection.getNonFungibleTokenOwnership(address, tokenId, owner)\n")),(0,l.kt)("h3",{id:"getnonfungibletokenmetadata"},"getNonFungibleTokenMetadata"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleTokenMetadata(\n    address: string,\n    tokenId: string,\n    schema?: SchemaType,\n    initial?: Web3ConnectionOptions,\n): Promise<NonFungibleTokenMetadata<ChainId>>\n")),(0,l.kt)("p",null,"Get a non-fungible token."),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("h4",{id:"example-10"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getnonfungibletokencontract"},"getNonFungibleTokenContract"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleTokenContract(\n    address: string,\n    schema?: SchemaType,\n    initial?: Web3ConnectionOptions,\n): Promise<NonFungibleTokenContract<ChainId, SchemaType>>\n")),(0,l.kt)("p",null,"Get a non-fungible token contract."),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("h4",{id:"example-11"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getnonfungibletokencollection"},"getNonFungibleTokenCollection"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleTokenCollection(\n    address: string,\n    schema?: SchemaType,\n    initial?: Web3ConnectionOptions,\n): Promise<NonFungibleTokenCollection<ChainId>>\n")),(0,l.kt)("p",null,"Get a non-fungible token collection."),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("h4",{id:"example-12"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getnativetokenbalance"},"getNativeTokenBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNativeTokenBalance(initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get a native fungible token balance. Alias of ",(0,l.kt)("inlineCode",{parentName:"p"},"getBalance"),"."),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<string>")," The balance as a hex string."),(0,l.kt)("h4",{id:"example-13"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const balance = await connection.getNativeTokenBalance()\n")),(0,l.kt)("h3",{id:"getfungibletokenbalance"},"getFungibleTokenBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getFungibleTokenBalance(address: string, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get fungible token balance."),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<string>")," The balance as a hex string."),(0,l.kt)("h4",{id:"example-14"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const balance = await connection.getFungibleTokenBalance()\n")),(0,l.kt)("h3",{id:"getnonfungibletokenbalance"},"getNonFungibleTokenBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleTokenBalance(address: string, tokenId?: string, schema?: SchemaType, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get a non-fungible token balance."),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"address - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The token program address."),(0,l.kt)("li",{parentName:"ol"},"tokenId - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of the token."),(0,l.kt)("li",{parentName:"ol"},"schema - ",(0,l.kt)("inlineCode",{parentName:"li"},"SchemaType"),". An optional token schema type."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<string>")," The balance as a hex string."),(0,l.kt)("h4",{id:"example-15"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const balance = await connection.getNonFungibleTokenBalance()\n")),(0,l.kt)("h3",{id:"getfungibletokensbalance"},"getFungibleTokensBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getFungibleTokensBalance(listOfAddress: string[], initial?: Web3ConnectionOptions): Promise<Record<string, string>>\n")),(0,l.kt)("p",null,"Get fungible token balance."),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"listOfAddress - ",(0,l.kt)("inlineCode",{parentName:"li"},"string[]"),"."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("h4",{id:"example-16"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const listOfBalance = await connection.getFungibleTokensBalance(listOfAddress)\n")),(0,l.kt)("h3",{id:"getnonfungibletokensbalance"},"getNonFungibleTokensBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getNonFungibleTokensBalance(\n    listOfAddress: string[],\n    initial?: Web3ConnectionOptions,\n): Promise<Record<string, string>>\n")),(0,l.kt)("p",null,"Get a non-fungible token balance."),(0,l.kt)("h4",{id:"parameters-17"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-17"},"Returns"),(0,l.kt)("h4",{id:"example-17"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"getaccount"},"getAccount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getAccount(initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get the currently connected account."),(0,l.kt)("h4",{id:"parameters-18"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<string>")," The account address."),(0,l.kt)("h4",{id:"example-18"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const account = await connection.getAccount()\n")),(0,l.kt)("h3",{id:"getchainid"},"getChainId"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getChainId(initial?: Web3ConnectionOptions): Promise<ChainId>\n")),(0,l.kt)("p",null,"Get the current chain id."),(0,l.kt)("h4",{id:"parameters-19"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<ChainId>")," The chain id must be a natural number."),(0,l.kt)("h4",{id:"example-19"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const chainId = await connection.getChainId()\n")),(0,l.kt)("h3",{id:"getblock"},"getBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getBlock(no: number, initial?: Web3ConnectionOptions): Promise<Block | null>\n")),(0,l.kt)("p",null,"Get a specific block."),(0,l.kt)("h4",{id:"parameters-20"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"no - ",(0,l.kt)("inlineCode",{parentName:"li"},"number"),". To specific the number of the block."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-20"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Block | null>")," The block object defined in ",(0,l.kt)("a",{parentName:"p",href:"./web3-types"},"Types"),"."),(0,l.kt)("h4",{id:"example-20"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// learn more: https://web3js.readthedocs.io/en/v1.7.3/web3-eth.html#getblock\nconst block = await connection.getBlock()\n\n// learn more: https://docs.solana.com/developing/clients/jsonrpc-api#getblock\nconst solanaBlock = await solanaConnection.getBlock()\n")),(0,l.kt)("h3",{id:"getblocknumber"},"getBlockNumber"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getBlockNumber(initial?: Web3ConnectionOptions): Promise<number>\n")),(0,l.kt)("p",null,"Get the latest block number."),(0,l.kt)("h4",{id:"parameters-21"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-21"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<number>")),(0,l.kt)("h4",{id:"example-21"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const blockNumber = await connection.getBlockNumber()\n")),(0,l.kt)("h3",{id:"getblocktimestamp"},"getBlockTimestamp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getBlockTimestamp(initial?: Web3ConnectionOptions): Promise<number>\n")),(0,l.kt)("p",null,"Get the latest block UNIX timestamp."),(0,l.kt)("h4",{id:"parameters-22"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-22"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<number>")),(0,l.kt)("h4",{id:"example-22"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const timestamp = await connection.getBlockNumber()\n\n// convert to a normal Date object\nconst date = new Date(timestamp * 1000)\n")),(0,l.kt)("h3",{id:"getbalance"},"getBalance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getBalance(address: string, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get the latest balance of the account."),(0,l.kt)("h4",{id:"parameters-23"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-23"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<string")," The balance as a hex string."),(0,l.kt)("h4",{id:"example-23"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const balance = await connection.getBalance()\n\n// format as Ether\nformatBalance(balance, 18)\n")),(0,l.kt)("h3",{id:"gettransaction"},"getTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getTransaction(id: string, initial?: Web3ConnectionOptions): Promise<TransactionDetailed | null>\n")),(0,l.kt)("p",null,"Get the detailed information of a transaction."),(0,l.kt)("h4",{id:"parameters-24"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of the transaction."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-24"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Transaction>")," The transaction object defined in ",(0,l.kt)("a",{parentName:"p",href:"/docs/web3/web3-types"},"Types"),"."),(0,l.kt)("h4",{id:"example-24"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const transaction = await connection.getTransaction(id)\n")),(0,l.kt)("h3",{id:"gettransactionstatus"},"getTransactionStatus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getTransactionStatus(id: string, initial?: Web3ConnectionOptions): Promise<TransactionStatusType>\n")),(0,l.kt)("p",null,"Get the latest transaction status. A transaction could be one of three statuses ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT_DEPEND"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"SUCCEED")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"FAILED"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-txt"},"# a succeed transaction: transit from initial status to successful status\nNOT_DEPEND(START) -> SUCCEED(END)\n\n# a failed transaction: transit from initial status to failure status\nNOT_DEPEND(START) -> FAILED(END)\n")),(0,l.kt)("h4",{id:"parameters-25"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of a transaction."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-25"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<TransactionStatusType>")," A computed transaction status type."),(0,l.kt)("h4",{id:"example-25"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const status = await connection.getTransactionStatus(id)\n")),(0,l.kt)("h3",{id:"gettransactionnonce"},"getTransactionNonce"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getTransactionNonce(address: string, initial?: Web3ConnectionOptions): Promise<number>\n")),(0,l.kt)("p",null,"Get the latest transaction nonce."),(0,l.kt)("h4",{id:"parameters-26"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-26"},"Returns"),(0,l.kt)("h4",{id:"example-26"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"gettransactionreceipt"},"getTransactionReceipt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getTransactionReceipt(id: string, initial?: Web3ConnectionOptions): Promise<TransactionReceipt | null>\n")),(0,l.kt)("p",null,"Get the transaction receipt."),(0,l.kt)("h4",{id:"parameters-27"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of the transaction."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-27"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<TransactionReceipt>")," The tranaction receipt object defined in ",(0,l.kt)("a",{parentName:"p",href:"/docs/web3/web3-types"},"Types"),"."),(0,l.kt)("h4",{id:"example-27"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const receipt = await connection.getTransactionReceipt(id)\n")),(0,l.kt)("h3",{id:"getcode"},"getCode"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"getCode(address: string, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Get the source code of an on-chain program."),(0,l.kt)("h4",{id:"parameters-28"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"address - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The address of the on-chain program."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-28"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<string>")," The source code of the program."),(0,l.kt)("h4",{id:"example-28"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// get USDC contract source\nconst code = await connection.getCode('0x')\n// > 0x...\n")),(0,l.kt)("h3",{id:"switchchain"},"switchChain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"switchChain?: (chainId: ChainId, initial?: Web3ConnectionOptions) => Promise<void>\n")),(0,l.kt)("p",null,"Switch to a sub-network."),(0,l.kt)("h4",{id:"parameters-29"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"chainId - ",(0,l.kt)("inlineCode",{parentName:"li"},"ChainId"),". The chain id of the sub-network."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-29"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<void>")),(0,l.kt)("h4",{id:"example-29"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// switch to Ethereum mainnet\nawait connection.switchChain(ChainId.Mainnet)\n\n// switch to polygon network\nawait connection.switchChainId(ChainId.Polygon)\n")),(0,l.kt)("h3",{id:"signmessage"},"signMessage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const signature = await connection.signMessage(message, [signType], [options])\n")),(0,l.kt)("p",null,"Sign data using the currently selected account. This account could be overrided with ",(0,l.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,l.kt)("h4",{id:"parameters-30"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"message - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". Data to sign. A UTF8 string."),(0,l.kt)("li",{parentName:"ol"},"signType - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". Switch between multiple sign algorithms. The default value for EVM is ",(0,l.kt)("inlineCode",{parentName:"li"},"personalSign")," and supports typed data sign (v4) with ",(0,l.kt)("inlineCode",{parentName:"li"},"typedDataSign"),"."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-30"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<srting>")," - The signed signature."),(0,l.kt)("h4",{id:"example-30"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const message = 'Hello World'\nconst signature = await connection.signMessage(message, 'personalSign')\n// > `0x...`\n")),(0,l.kt)("h3",{id:"verifymessage"},"verifyMessage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"verifyMessage(\n    dataToVerify: string,\n    signature: Signature,\n    signType?: string,\n    initial?: Web3ConnectionOptions,\n): Promise<boolean>\n")),(0,l.kt)("p",null,"Verify a message signature."),(0,l.kt)("h4",{id:"parameters-31"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-31"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<boolean>")),(0,l.kt)("h4",{id:"example-31"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const message = 'Hello World'\nconst signature = await connection.signMessage(message, 'personalSign')\nconst verified = await connection.verifyMessage(message, signature, 'personalSign')\n// > true\n")),(0,l.kt)("h3",{id:"transferfungibletoken"},"transferFungibleToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"transferFungibleToken(\n    address: string,\n    recipient: string,\n    amount: string,\n    memo?: string,\n    initial?: Web3ConnectionOptions,\n): Promise<string>\n")),(0,l.kt)("p",null,"Transfer fungible token to."),(0,l.kt)("h4",{id:"parameters-32"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-32"},"Returns"),(0,l.kt)("h4",{id:"example-32"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"transfernonfungibletoken"},"transferNonFungibleToken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"transferNonFungibleToken(\n    address: string | undefined,\n    recipient: string,\n    tokenId: string,\n    amount: string,\n    schema?: SchemaType,\n    initial?: Web3ConnectionOptions,\n): Promise<string>\n")),(0,l.kt)("p",null,"Transfer non-fungible token to."),(0,l.kt)("h4",{id:"parameters-33"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-33"},"Returns"),(0,l.kt)("h4",{id:"example-33"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"signtransaction"},"signTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"signTransaction(transaction: Transaction, initial?: Web3ConnectionOptions): Promise<TransactionSignature>\n")),(0,l.kt)("p",null,"Sign a transaction. Most time, a transaction signature is a plain string."),(0,l.kt)("h4",{id:"parameters-34"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-34"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<TransactionSignature>"),". An transaction signature defined in ",(0,l.kt)("a",{parentName:"p",href:"./web3-types"},"Types"),"."),(0,l.kt)("h4",{id:"example-34"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const signature = await connection.signTransaction(transaction)\n")),(0,l.kt)("h3",{id:"signtransactions"},"signTransactions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"signTransactions(transactions: Transaction[], initial?: Web3ConnectionOptions): Promise<TransactionSignature[]>\n")),(0,l.kt)("p",null,"Sign multiple transactions."),(0,l.kt)("h4",{id:"parameters-35"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-35"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<Array<TransactionSignature>>"),". An array of transaction signatures."),(0,l.kt)("h4",{id:"example-35"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const signatures = await connection.signTransactions(transactions)\n")),(0,l.kt)("h3",{id:"calltransaction"},"callTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"callTransaction(transaction: Transaction, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Query a transaction."),(0,l.kt)("h4",{id:"parameters-36"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-36"},"Returns"),(0,l.kt)("h4",{id:"example-36"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"sendtransaction"},"sendTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"sendTransaction(transaction: Transaction, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Send a transaction and wait for mining."),(0,l.kt)("h4",{id:"parameters-37"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-37"},"Returns"),(0,l.kt)("h4",{id:"example-37"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"sendsignedtransaction"},"sendSignedTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"sendSignedTransaction(signature: TransactionSignature, initial?: Web3ConnectionOptions): Promise<string>\n")),(0,l.kt)("p",null,"Send a signed transaction."),(0,l.kt)("h4",{id:"parameters-38"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-38"},"Returns"),(0,l.kt)("h4",{id:"example-38"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("h3",{id:"replacetransaction"},"replaceTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"replaceTransaction(id: string, transaction: Transaction, initial?: Web3ConnectionOptions): Promise<void>\n")),(0,l.kt)("p",null,"To replace a sent transaction before it gets confirmation."),(0,l.kt)("h4",{id:"parameters-39"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of the transaction to be replaced."),(0,l.kt)("li",{parentName:"ol"},"transaction - ",(0,l.kt)("inlineCode",{parentName:"li"},"Transaction"),". The substitute transaction."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-39"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<void>")),(0,l.kt)("h4",{id:"example-39"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"// TODO\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const id = await connection.sendTransaction({\n    /* ... */\n    gasPrice: toHex(300000),\n})\n\n// replace the previously sent transaction with a higher gasPrice\nawait connection.replaceTransation(id, {\n    /* ... */\n    gasPrice: toHex(400000),\n})\n")),(0,l.kt)("h3",{id:"canceltransaction"},"cancelTransaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"cancelTransaction(id: string, initial?: Web3ConnectionOptions): Promise<void>\n")),(0,l.kt)("p",null,"To cancel a sent transaction before it gets confirmation."),(0,l.kt)("h4",{id:"parameters-40"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id - ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),". The id of the transaction to be canceled."),(0,l.kt)("li",{parentName:"ol"},"initial - ",(0,l.kt)("inlineCode",{parentName:"li"},"Web3ConnectionOptions"),". An optional object to override the connection settings.")),(0,l.kt)("h4",{id:"returns-40"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<void>")),(0,l.kt)("h4",{id:"example-40"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const hash = await connection.sendTransaction(transaction)\n\n// cancel the previous sent transation\nawait connection.cancelTransaction(hash)\n")))}d.isMDXComponent=!0}}]);