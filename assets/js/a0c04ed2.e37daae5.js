"use strict";(self.webpackChunkmask_docs=self.webpackChunkmask_docs||[]).push([[302],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,d=m["".concat(s,".").concat(u)]||m[u]||k[u]||r;return a?n.createElement(d,l(l({ref:t},c),{},{components:a})):n.createElement(d,l({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1439:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return k}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),l=["components"],o={},s="EVM Chain Integration",p={unversionedId:"plugin-infra/evm-integration",id:"plugin-infra/evm-integration",title:"EVM Chain Integration",description:"It's easy to integrate an EVM-compatible chain into Mask Network. After you add a new ChainId and NetworkType in packages/web3-shared/evm/types/index.ts. You can follow the TypeScript compiler. By fixing these errors, the integration progress will keep moving forward. Here is a complete instruction list to ensure you wouldn't miss anything.",source:"@site/docs/plugin-infra/evm-integration.md",sourceDirName:"plugin-infra",slug:"/plugin-infra/evm-integration",permalink:"/docs/plugin-infra/evm-integration",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugin-infra/evm-integration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSS in JS Guide",permalink:"/docs/plugin-infra/css-in-js"},next:{title:"Form Guide",permalink:"/docs/plugin-infra/form-guide"}},c={},k=[{value:"Integration Instructions",id:"integration-instructions",level:2},{value:"Setup Metadata",id:"setup-metadata",level:3},{value:"Setup External APIs",id:"setup-external-apis",level:3},{value:"Learn more",id:"learn-more",level:4},{value:"Web3 Constants Compile Config",id:"web3-constants-compile-config",level:3},{value:"Token List",id:"token-list",level:3},{value:"Token Icon",id:"token-icon",level:3},{value:"DEX",id:"dex",level:3},{value:"Deploy Contracts",id:"deploy-contracts",level:3},{value:"Translate JSON-RPC",id:"translate-json-rpc",level:3},{value:"\ud83c\udf89",id:"",level:3},{value:"Testing Checklist",id:"testing-checklist",level:2},{value:"Examples",id:"examples",level:2}],m={toc:k};function u(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"evm-chain-integration"},"EVM Chain Integration"),(0,r.kt)("p",null,"It's easy to integrate an EVM-compatible chain into Mask Network. After you add a new ",(0,r.kt)("inlineCode",{parentName:"p"},"ChainId")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkType")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/web3-shared/evm/types/index.ts"),". You can follow the TypeScript compiler. By fixing these errors, the integration progress will keep moving forward. Here is a complete instruction list to ensure you wouldn't miss anything."),(0,r.kt)("h2",{id:"integration-instructions"},"Integration Instructions"),(0,r.kt)("h3",{id:"setup-metadata"},"Setup Metadata"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add a logo image",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages/mask/src/plugins/EVM/assets/")))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add metadata data",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages/web3-shared/evm/assets/chains.json")))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add an HTTP RPC node",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages/web3-constants/evm/rpc.json")))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Set network descriptor",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PLUGIN_NETWORKS")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"packages/mask/src/plugins/EVM/constants.ts"))))),(0,r.kt)("h3",{id:"setup-external-apis"},"Setup External APIs"),(0,r.kt)("p",null,"Mask Network fetches on-chain data from various data sources. Therefore, you can configure the identification data of the chain on those providers."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Provider"),(0,r.kt)("th",{parentName:"tr",align:null},"Configuration Path"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DeBank"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"packages/web3-constants/evm/debank.json"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CoinGecko"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"packages/web3-constants/evm/coingecko.json"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CoinMarketCap"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"packages/web3-constants/evm/coinmarketcap.json"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Zerion"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"packages/web3-constants/evm/zerion.json"))))),(0,r.kt)("h4",{id:"learn-more"},"Learn more"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.coingecko.com/api/v3/asset_platforms"},"https://api.coingecko.com/api/v3/asset_platforms"))),(0,r.kt)("h3",{id:"web3-constants-compile-config"},"Web3 Constants Compile Config"),(0,r.kt)("p",null,"Add the chain name to ",(0,r.kt)("inlineCode",{parentName:"p"},"compileConstants()")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/web3-constants/compile-constants.ts"),"."),(0,r.kt)("h3",{id:"token-list"},"Token List"),(0,r.kt)("p",null,"The team maintains a token list ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DimensionDev/Mask-Token-List"},"https://github.com/DimensionDev/Mask-Token-List"),". So free feel to create one for the chain. And add the token list link to ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/web3-constants/evm/token-list.json"),"."),(0,r.kt)("h3",{id:"token-icon"},"Token Icon"),(0,r.kt)("p",null,"The token icon could be read from the token list. Or in case of a network problem from a fallback link. Add the fallback links into ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/web3-constants/evm/token-asset-base-url.json"),"."),(0,r.kt)("h3",{id:"dex"},"DEX"),(0,r.kt)("p",null,"Mask Network has integrated Uniswap V2 and Uniswap V3 into the trader plugin. If the DEX of the chain is a fork from them can be easily configured. Learn more: ",(0,r.kt)("inlineCode",{parentName:"p"},"packages/web3-constants/evm/trader.json"),"."),(0,r.kt)("p",null,"For API-based DEX, please ref to how other DEXes integrated:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"DEX"),(0,r.kt)("th",{parentName:"tr",align:null},"Pull Request Link"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DODO"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/3882"},"https://github.com/DimensionDev/Maskbook/pull/3882"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OpenOcean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/5198"},"https://github.com/DimensionDev/Maskbook/pull/5198"))))),(0,r.kt)("h3",{id:"deploy-contracts"},"Deploy Contracts"),(0,r.kt)("p",null,"If there is no one deployed ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DimensionDev/misc_smart_contract"},"these contracts")," on the chain. Please contact the team."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Multicall Contract"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","BalanceChecker"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Other contracts from the Mask team")),(0,r.kt)("h3",{id:"translate-json-rpc"},"Translate JSON-RPC"),(0,r.kt)("p",null,"For a chain that follows a different JSON-RPC protocol with the ",(0,r.kt)("a",{parentName:"p",href:"https://eth.wiki/json-rpc/API"},"Ethereum"),", a transactor is used to ",(0,r.kt)("inlineCode",{parentName:"p"},"encode")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"decode")," each request and make the chain just like an EVM-compatible one."),(0,r.kt)("p",null,"E.g., the CELO chain can pay the transaction fee with non-native tokens. It supports to use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.celo.org/celo-codebase/protocol/transactions/erc20-transaction-fees"},(0,r.kt)("inlineCode",{parentName:"a"},"feeCurrency"))," field to set the token address, which doesn't exist in the original ",(0,r.kt)("a",{parentName:"p",href:"https://eth.wiki/json-rpc/API#eth_sendtransaction"},(0,r.kt)("inlineCode",{parentName:"a"},"eth_sendTransaction"))," payload. You can fulfill this requirement by a transactor without altering any JSON-RPC facilities."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class CeloTranslator extends Base {\n  override encode(context: Context) {\n    context.config = {\n      ...context.config,\n      feeCurrency: '0x0000000000000000000000000000000000000001', // suppose it's a token address\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:""},"\ud83c\udf89"),(0,r.kt)("p",null,"Congratulation! You have done the coding part."),(0,r.kt)("h2",{id:"testing-checklist"},"Testing Checklist"),(0,r.kt)("p",null,"Here is the chain abilities checklist. If you are working on a bounty task, please do each task in list before inviting the team to review your pull request."),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("input",{parentName:"p",type:"checkbox",checked:!1,disabled:!0})," ","Check if the asset list and transaction history on the dashboard page work when you choose the chain as the network."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Setup the chain for DeBank API."))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("input",{parentName:"p",type:"checkbox",checked:!1,disabled:!0})," ","Check if the trending view is working. Try to hover a new chain token in any tweets."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Setup the chain for Coingecko API."),(0,r.kt)("li",{parentName:"ul"},"Setup the chain for CoinMarketCap API."))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("input",{parentName:"p",type:"checkbox",checked:!1,disabled:!0})," ","Check if the gas estimate dialog is working."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Setup the chain for CoinGecko API."))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("input",{parentName:"p",type:"checkbox",checked:!1,disabled:!0})," ","Trade with the DEX on the chain."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Integrate a DEX for the chain."),(0,r.kt)("li",{parentName:"ul"},"Estimate gas will be showed on DEX card and sort correctly."))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("input",{parentName:"p",type:"checkbox",checked:!1,disabled:!0})," ","Send a transaction and check if the explorer links are working."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Setup metadata and RPC for the chain."),(0,r.kt)("li",{parentName:"ul"},"Transaction sent to wallet with medium gas fee setting."),(0,r.kt)("li",{parentName:"ul"},"Required to unlock ERC20 token before swapping ERC20 to any other tokens."))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("input",{parentName:"p",type:"checkbox",checked:!1,disabled:!0})," ","Transfer token on the transfer page of Dashboard and the wallet tab of the plugin popup."))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Chain"),(0,r.kt)("th",{parentName:"tr",align:null},"Pull Request Link"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CELO"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/5052"},"https://github.com/DimensionDev/Maskbook/pull/5052"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Fantom"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/5036"},"https://github.com/DimensionDev/Maskbook/pull/5036"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"xDai"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/4140"},"https://github.com/DimensionDev/Maskbook/pull/4140"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Arbitrum"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/3558"},"https://github.com/DimensionDev/Maskbook/pull/3558"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Avalanche"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/5289"},"https://github.com/DimensionDev/Maskbook/pull/5289"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Harmony"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/DimensionDev/Maskbook/pull/5835"},"https://github.com/DimensionDev/Maskbook/pull/5835"))))))}u.isMDXComponent=!0}}]);