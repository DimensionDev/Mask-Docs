"use strict";(self.webpackChunkmask_docs=self.webpackChunkmask_docs||[]).push([[678],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),m=s(a),k=r,h=m["".concat(o,".").concat(k)]||m[k]||u[k]||l;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5055:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return d},metadata:function(){return s},toc:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],d={title:"Others",sidebar_position:12},o=void 0,s={unversionedId:"web3/others",id:"web3/others",title:"Others",description:"The Others provides a way to access network definitions.",source:"@site/docs/web3/others.md",sourceDirName:"web3",slug:"/web3/others",permalink:"/docs/web3/others",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web3/others.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Others",sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Provider",permalink:"/docs/web3/provider"},next:{title:"FQA",permalink:"/docs/faq"}},p={},u=[{value:"Definitions",id:"definitions",level:2},{value:"Chain Descriptor",id:"chain-descriptor",level:3},{value:"Network Descriptor",id:"network-descriptor",level:3},{value:"Provider Descriptor",id:"provider-descriptor",level:3},{value:"Usage",id:"usage",level:2},{value:"getDefaultChainId",id:"getdefaultchainid",level:3},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"getDefaultNetworkType",id:"getdefaultnetworktype",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"getDefaultProviderType",id:"getdefaultprovidertype",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"getZeroAddress",id:"getzeroaddress",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"getNativeTokenAddress",id:"getnativetokenaddress",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"getMaskTokenAddress",id:"getmasktokenaddress",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"getAverageBlockDelay",id:"getaverageblockdelay",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"getTransactionSignature",id:"gettransactionsignature",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"isSameAddress",id:"issameaddress",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"isZeroAddress",id:"iszeroaddress",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"isNativeTokenAddress",id:"isnativetokenaddress",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"isValidChain",id:"isvalidchain",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-11",level:4},{value:"isValidDomain",id:"isvaliddomain",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Example",id:"example-12",level:4},{value:"isValidAddress",id:"isvalidaddress",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-13",level:4},{value:"chainResolver",id:"chainresolver",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Example",id:"example-14",level:4},{value:"explorerResolver",id:"explorerresolver",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Example",id:"example-15",level:4},{value:"providerResolver",id:"providerresolver",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Example",id:"example-16",level:4},{value:"networkResolver",id:"networkresolver",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Example",id:"example-17",level:4},{value:"formatAddress",id:"formataddress",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Example",id:"example-18",level:4},{value:"formatTokenId",id:"formattokenid",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Example",id:"example-19",level:4},{value:"formatDomainName",id:"formatdomainname",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Example",id:"example-20",level:4}],m={toc:u};function k(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Others")," provides a way to access network definitions."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"The default chain of the network.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"The average time for mining a single block.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Definition of chains, networks, and providers."))),(0,l.kt)("p",null,"It alos defines many commonly needed utilities from dapps."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Utility functions for addresses comparison.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Utility functions for formatting addresses, domains, and token ids."))),(0,l.kt)("h2",{id:"definitions"},"Definitions"),(0,l.kt)("h3",{id:"chain-descriptor"},"Chain Descriptor"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ChainDescriptor")," defines a subnetwork of a kind of blockchain."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},"The type of chain. It's a rougher categorization than chain id. E.g., Matic and Mumbai have different chain IDs but have the same network type ",(0,l.kt)("inlineCode",{parentName:"td"},"Polygon"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chainId")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the chain. It must be a natural number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"coinMarketCapChainId")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the chain in CoinMarketCap. It's used when calling CoinMarketCap APIs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"coinGeckoChainId")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the chain in CoinGecko. It's used when calling CoinGecko APIs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"coinGeckoPlatformId")),(0,l.kt)("td",{parentName:"tr",align:null},"The platform ID of the chain in CoinGecko. It's used when callin CoinGecko APIs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"color")),(0,l.kt)("td",{parentName:"tr",align:null},"The primary color of the chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fullName")),(0,l.kt)("td",{parentName:"tr",align:null},"The full name of the chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shortName")),(0,l.kt)("td",{parentName:"tr",align:null},"The brief name of the chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"network")),(0,l.kt)("td",{parentName:"tr",align:null},"A label for marking ",(0,l.kt)("inlineCode",{parentName:"td"},"mainnet")," different from other networks. If the chain is a mainnet, it should be ",(0,l.kt)("inlineCode",{parentName:"td"},"mainnet"),". All other values will let the chain be treated as testnets.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nativeCurrency")),(0,l.kt)("td",{parentName:"tr",align:null},"The native token of the chain. We assumed that it was a fungible token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"explorerURL")),(0,l.kt)("td",{parentName:"tr",align:null},"The URL of the explorer website of the chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"features")),(0,l.kt)("td",{parentName:"tr",align:null},"A list of supported features of the chain. (E.g, ",(0,l.kt)("inlineCode",{parentName:"td"},"EIP1193"),")")))),(0,l.kt)("h3",{id:"network-descriptor"},"Network Descriptor"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"NetworkDescriptor")," defines a subnetwork of a kind of blockchain. The difference between ",(0,l.kt)("inlineCode",{parentName:"p"},"ChainDescriptor")," is a it only defines the currently supported subnetworks of Mask Network."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ID")),(0,l.kt)("td",{parentName:"tr",align:null},"An unique ID for each subnetwork.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"networkSupporterPluginID")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the plugin that provides the functionality of the network.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"chainId")),(0,l.kt)("td",{parentName:"tr",align:null},"The chain id of the network. A network descirptor must has a coressponding chain descriptor.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},"The network type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"icon")),(0,l.kt)("td",{parentName:"tr",align:null},"The network icon.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"iconColor")),(0,l.kt)("td",{parentName:"tr",align:null},"The network icon in fixed color.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"averageBlockDelay")),(0,l.kt)("td",{parentName:"tr",align:null},"The average time for mining a block. (unit: seconds)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"backgroundGradient")),(0,l.kt)("td",{parentName:"tr",align:null},"The background gradient color of the network.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"The network name.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shortName")),(0,l.kt)("td",{parentName:"tr",align:null},"The network short name.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"isMainnet")),(0,l.kt)("td",{parentName:"tr",align:null},"Is a mainnet network.")))),(0,l.kt)("h3",{id:"provider-descriptor"},"Provider Descriptor"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ProviderDescriptor")," defines a wallet provider."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ID")),(0,l.kt)("td",{parentName:"tr",align:null},"An unique ID for each wallet provider.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"providerAdaptorPluginID")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of a plugin that provides the adoption of this provider..")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},"The provider type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"icon")),(0,l.kt)("td",{parentName:"tr",align:null},"The provider icon.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"The provider name.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"backgroundGradient")),(0,l.kt)("td",{parentName:"tr",align:null},"The provider bar background gradient color.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"iconFilterColor")),(0,l.kt)("td",{parentName:"tr",align:null},"The provider icon filter color.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enableRequirements.supportedChainIds")),(0,l.kt)("td",{parentName:"tr",align:null},"All supported subnetworks of the wallet provider.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enableRequirements.supportedEnhanceableSites")),(0,l.kt)("td",{parentName:"tr",align:null},"All supported SNS websites of the wallet provider.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enableRequirements.supportedExtensionSites")),(0,l.kt)("td",{parentName:"tr",align:null},"All supported extension websites of the wallet provider. Only two extension websites: ",(0,l.kt)("inlineCode",{parentName:"td"},"Popups")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"Dashboard"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"homeLink")),(0,l.kt)("td",{parentName:"tr",align:null},"A link to provider's home website. E.g., ",(0,l.kt)("inlineCode",{parentName:"td"},"https://metamask.io"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shortenLink")),(0,l.kt)("td",{parentName:"tr",align:null},"A link only contains domain name. E.g., ",(0,l.kt)("inlineCode",{parentName:"td"},"metamask.io"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"downloadLink")),(0,l.kt)("td",{parentName:"tr",align:null},"A link to download the client application. E.g., ",(0,l.kt)("inlineCode",{parentName:"td"},"https://metamask.io/download.html"),".")))),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"getdefaultchainid"},"getDefaultChainId"),(0,l.kt)("p",null,"A network plugin should set a  e.g., The Ethereum Mainnet Network (",(0,l.kt)("inlineCode",{parentName:"p"},"ChainId.Mainnet"),") is the default network of EVM-compatible networks."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const defaultChainId = getDefaultChainId(): ChainId\n")),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ChainId")," - The chain id of the subnetwork."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\n// It returns ChainId.Mainnet which is 1.\nconst defaultChainId = Others?.getDefaultChainId()\n")),(0,l.kt)("h3",{id:"getdefaultnetworktype"},"getDefaultNetworkType"),(0,l.kt)("p",null,"Get the network type of the default subnetwork, e.g., The Ethereum Mainnet (",(0,l.kt)("inlineCode",{parentName:"p"},"NetworkType.Ethereum"),") is the default subnetwork in many EVM blockchains."),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"NetworkType")," - The network type of the subnetwork."),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\n// It returns NetworkType.Ethereum which is 'Ethereum'.\nconst defaultNetworkType = Others?.getDefaultNetworkType()\n")),(0,l.kt)("h3",{id:"getdefaultprovidertype"},"getDefaultProviderType"),(0,l.kt)("p",null,"Get the provider type of the default wallet provider."),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ProviderType")," - The wallet provider type."),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\n// If you are on the popups page, it will return 'ProviderType.MaskWallet'.\nconst defaultProviderType = getDefaultProviderType()\n")),(0,l.kt)("h3",{id:"getzeroaddress"},"getZeroAddress"),(0,l.kt)("p",null,"Get the nullish address. E.g., It's ",(0,l.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000")," for EVM blockchains."),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")," - The nullish address."),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\n// For EVM, you can also import this constants from `@masknet/web3-shared-evm`.\nconst ZERO_ADDRESS = Others?.getZeroAddress()\n")),(0,l.kt)("h3",{id:"getnativetokenaddress"},"getNativeTokenAddress"),(0,l.kt)("p",null,"Get the address of the native token (the gas token) of a subnetwork. A native token address could be different between subnetworks. E.g., for some EVM blockchains, they use a ERC20 token for gas fees."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ChainId")," - The chain id of the subnetwork."),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")," - The address of the native token."),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nconst NATIVE_TOKEN_ADDRESS = getNativeTokenAddress(ChainId.Mainnet)\n")),(0,l.kt)("h3",{id:"getmasktokenaddress"},"getMaskTokenAddress"),(0,l.kt)("p",null,"Get the address of the Mask token of on the subnetwork. Now it's only avaiable on EVM blockchains: Ethereum Mainnet, BNB, and Polygon."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ChainId")," - The chain id of the subnetwork."),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")," - The address of the Mask token."),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nconst MASK_TOKEN_ADDRESS = getMaskTokenAddress(ChainId.Mainnet)\n")),(0,l.kt)("h3",{id:"getaverageblockdelay"},"getAverageBlockDelay"),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\ngetAverageBlockDelay(chainId: ChainId, scale = 1): number {\n    return this.options.defaultBlockDelay * scale * 1000\n}\n")),(0,l.kt)("h3",{id:"gettransactionsignature"},"getTransactionSignature"),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("h4",{id:"example-7"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\ngetTransactionSignature(chainId?: ChainId, transaction?: Transaction | undefined): string |undefined {\n    return\n}\n")),(0,l.kt)("h3",{id:"issameaddress"},"isSameAddress"),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("h4",{id:"example-8"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nisSameAddress(address?: string): boolean {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"iszeroaddress"},"isZeroAddress"),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("h4",{id:"example-9"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nisZeroAddress(address?: string): boolean {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"isnativetokenaddress"},"isNativeTokenAddress"),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("h4",{id:"example-10"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nisNativeTokenAddress(address?: string): boolean {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"isvalidchain"},"isValidChain"),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("h4",{id:"example-11"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nisValidChain(chainId: ChainId, testnet = false): boolean {\n    return this.options.chainDescriptors.find((x) => x.chainId === chainId)?.network === 'mainnet' || testnet\n}\n")),(0,l.kt)("h3",{id:"isvaliddomain"},"isValidDomain"),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("h4",{id:"example-12"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nisValidDomain(domain: string): boolean {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"isvalidaddress"},"isValidAddress"),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("h4",{id:"example-13"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nisValidAddress(address: string): boolean {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"chainresolver"},"chainResolver"),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("h4",{id:"example-14"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nchainResolver = createChainResolver<ChainId, SchemaType, NetworkType>(this.options.chainDescriptors)\n")),(0,l.kt)("h3",{id:"explorerresolver"},"explorerResolver"),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("h4",{id:"example-15"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nexplorerResolver = createExplorerResolver<ChainId, SchemaType, NetworkType>(this.options.chainDescriptors)\n")),(0,l.kt)("h3",{id:"providerresolver"},"providerResolver"),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("h4",{id:"example-16"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nproviderResolver = createProviderResolver<ChainId, ProviderType>(this.options.providerDescriptors)\n")),(0,l.kt)("h3",{id:"networkresolver"},"networkResolver"),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("h4",{id:"returns-17"},"Returns"),(0,l.kt)("h4",{id:"example-17"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nnetworkResolver = createNetworkResolver<ChainId, NetworkType>(this.options.networkDescriptors)\n")),(0,l.kt)("h3",{id:"formataddress"},"formatAddress"),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("h4",{id:"example-18"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nformatAddress(address: string, size?: number | undefined): string {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"formattokenid"},"formatTokenId"),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("h4",{id:"example-19"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nformatTokenId(id?: string | undefined, size?: number | undefined): string {\n    throw new Error('Method not implemented.')\n}\n")),(0,l.kt)("h3",{id:"formatdomainname"},"formatDomainName"),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("h4",{id:"returns-20"},"Returns"),(0,l.kt)("h4",{id:"example-20"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const { Others } = useWeb3State(NetworkPluginID.PLUGIN_EVM)\n\nformatDomainName(domain?: string | undefined, size?: number | undefined): string {\n    throw new Error('Method not implemented.')\n}\n")))}k.isMDXComponent=!0}}]);