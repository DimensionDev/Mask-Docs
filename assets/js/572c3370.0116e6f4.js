"use strict";(self.webpackChunkmask_docs=self.webpackChunkmask_docs||[]).push([[928],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,b=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?o.createElement(b,i(i({ref:n},l),{},{components:t})):o.createElement(b,i({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4812:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],c={title:"Connection",sidebar_position:3},s=void 0,p={unversionedId:"web3/connection",id:"web3/connection",title:"Connection",description:"When we say create a connection with the network, it means we got a way to send request and receive response with a node in the network. The communication protocol might be HTTP or WebSocket. Generally speaking, developers don't need to compose the request payload manually. The SDK will come to help. For EVM, we have ethers.js and web3.js; for Flow, we have FCL.",source:"@site/docs/web3/connection.md",sourceDirName:"web3",slug:"/web3/connection",permalink:"/docs/web3/connection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web3/connection.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Connection",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"States",permalink:"/docs/web3/web3-state"},next:{title:"Provider",permalink:"/docs/web3/provider"}},l={},u=[],m={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When we say create a connection with the network, it means we got a way to send request and receive response with a node in the network. The communication protocol might be HTTP or WebSocket. Generally speaking, developers don't need to compose the request payload manually. The SDK will come to help. For EVM, we have ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},(0,a.kt)("inlineCode",{parentName:"a"},"ethers.js"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/"},(0,a.kt)("inlineCode",{parentName:"a"},"web3.js")),"; for Flow, we have ",(0,a.kt)("a",{parentName:"p",href:"https://docs.onflow.org/fcl/"},(0,a.kt)("inlineCode",{parentName:"a"},"FCL")),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ConnectionState")," implements the ability to interact with a blockchain network."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ConnectionState {\n    /** Get web3 SDK instance */\n    getWeb3?: (options?: Web3ConnectionOptions) => Promise<Web3>\n    /** Get web3 provider instance */\n    getWeb3Provider?: (options?: Web3ConnectionOptions) => Promise<Web3Provider>\n    /** Get connection */\n    getConnection?: (options?: Web3ConnectionOptions) => Promise<Web3Connection>\n}\n")),(0,a.kt)("p",null,"The primary task of this state is to implement a ",(0,a.kt)("inlineCode",{parentName:"p"},"Connection")," for the network. It describes the commonality of a network to be adopted. It includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"To create a SDK instance.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"To get the instant block number.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"To sign a plain message.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"To send a transaction.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"To connect to a wallet provider."))),(0,a.kt)("p",null,"Paste a snippet from the source code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Connection {\n    /** Get the latest block number. */\n    getBlockNumber(options?: Web3ConnectionOptions): Promise<number>\n    /** Sign message */\n    signMessage(dataToSign: string, signType?: string, options?: Web3ConnectionOptions): Promise<Signature>\n    /** Send a transaction and wait for mining */\n    sendTransaction(transaction: Transaction, options?: Web3ConnectionOptions): Promise<string>\n    /** Build connection */\n    connect(options?: Web3ConnectionOptions): Promise<Account<ChainId>>\n}\n")),(0,a.kt)("p",null,"Use the connection of your network in UI components:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const connection = useConnection(NetwrokPluginID.PLUGIN_EVM)\n\nconst signature = await connection.signMessage(message)\n")))}d.isMDXComponent=!0}}]);