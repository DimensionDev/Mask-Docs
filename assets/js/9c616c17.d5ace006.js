"use strict";(self.webpackChunkmask_docs=self.webpackChunkmask_docs||[]).push([[760],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,y=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(y,o(o({ref:t},d),{},{components:n})):a.createElement(y,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2641:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},p="TypedMessage binary format",s={unversionedId:"payload-format/typed-message",id:"payload-format/typed-message",title:"TypedMessage binary format",description:"Status: This format has not been shipped to production yet. It might change at any time.",source:"@site/docs/payload-format/typed-message.md",sourceDirName:"payload-format",slug:"/payload-format/typed-message",permalink:"/docs/payload-format/typed-message",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/payload-format/typed-message.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Payload version -37",permalink:"/docs/payload-format/payload-v37"},next:{title:"Quick start for Plugin Development",permalink:"/docs/plugin-development-quickstart"}},d={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Encoding",id:"encoding",level:2},{value:"<code>Document</code> type",id:"document-type",level:3},{value:"<code>TypedMessage</code>",id:"typedmessage",level:3},{value:"<code>type</code> field",id:"type-field",level:4},{value:"<code>version</code>",id:"version",level:4},{value:"<code>metadata</code>",id:"metadata",level:4},{value:"<code>TypedMessageText</code>",id:"typedmessagetext",level:3},{value:"<code>content</code> field",id:"content-field",level:4},{value:"<code>textFormat</code> field",id:"textformat-field",level:4},{value:"<code>TypedMessageTuple</code>",id:"typedmessagetuple",level:3}],u={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"typedmessage-binary-format"},"TypedMessage binary format"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Status: This format has not been shipped to production yet. It might change at any time.")),(0,i.kt)("h2",{id:"abstract"},"Abstract"),(0,i.kt)("p",null,"This is a binary format that is used to represent a rich document (text, images, ...etc)."),(0,i.kt)("h2",{id:"encoding"},"Encoding"),(0,i.kt)("p",null,"Following the ",(0,i.kt)("a",{parentName:"p",href:"/docs/payload-format/payload-v37#encoding"},"encoding convention of Payload37"),"."),(0,i.kt)("h3",{id:"document-type"},(0,i.kt)("inlineCode",{parentName:"h3"},"Document")," type"),(0,i.kt)("p",null,"This is the top-most data type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type Document = [version: Integer, ...Any]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"version")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is a ",(0,i.kt)("inlineCode",{parentName:"li"},"TypedMessageText"),"."),(0,i.kt)("li",{parentName:"ul"},"It should be parsed in the following way:")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type Document = [version: 0, text: String, meta?: Map | Nil]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"version")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The rest of the fields are ",(0,i.kt)("inlineCode",{parentName:"li"},"TypedMessage"),"."),(0,i.kt)("li",{parentName:"ul"},"It should be parsed in the following way:")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type Document = [version: 1, ...TypedMessage]\n\nfunction parse(doc: Array<any>) {\n  // drop the version field, and treat the rest as a TypedMessage\n  if (doc[0] === 1) return parseTypedMessage(doc.slice(1))\n}\n")),(0,i.kt)("h3",{id:"typedmessage"},(0,i.kt)("inlineCode",{parentName:"h3"},"TypedMessage")),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"TypedMessage")," must start with the following fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type TypedMessageBase = [\n  type: TypedMessageTypeEnum | String,\n  version: Integer,\n  metadata: Map | Nil,\n  ...rest: Array<Any>,\n]\nenum TypedMessageTypeEnum {\n  Tuple = 0,\n  Text = 1,\n}\n")),(0,i.kt)("h4",{id:"type-field"},(0,i.kt)("inlineCode",{parentName:"h4"},"type")," field"),(0,i.kt)("p",null,"This field represents the type of this TypedMessage."),(0,i.kt)("p",null,"It is a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypedMessageTypeEnum")," or a UTF-8 string."),(0,i.kt)("p",null,"When it is ",(0,i.kt)("inlineCode",{parentName:"p"},"TypedMessageTypeEnum"),", it represents a well-known TypedMessage defined in this specification."),(0,i.kt)("p",null,"When it is a ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", it represents a custom extension of TypedMessage."),(0,i.kt)("p",null,"An implementation MAY ignore an unknown type or render a hint."),(0,i.kt)("h4",{id:"version"},(0,i.kt)("inlineCode",{parentName:"h4"},"version")),(0,i.kt)("p",null,"This field represents the version of this TypedMessage contains."),(0,i.kt)("h4",{id:"metadata"},(0,i.kt)("inlineCode",{parentName:"h4"},"metadata")),(0,i.kt)("p",null,"This field represents the metadata this TypedMessage contains."),(0,i.kt)("p",null,"An implementation MUST NOT assume the data structure inside the metadata."),(0,i.kt)("h3",{id:"typedmessagetext"},(0,i.kt)("inlineCode",{parentName:"h3"},"TypedMessageText")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type TypedMessageText = [\n  //\n  type: TypedMessageTypeEnum.Text,\n  metadata: Map | Nil,\n  content: String,\n  textFormat?: TextFormat,\n]\nenum TextFormat {\n  PlainText = 0,\n  Markdown = 1,\n}\n")),(0,i.kt)("h4",{id:"content-field"},(0,i.kt)("inlineCode",{parentName:"h4"},"content")," field"),(0,i.kt)("p",null,"This field represents a text message. The interpretation of content depends on the ",(0,i.kt)("inlineCode",{parentName:"p"},"textFormat")," field."),(0,i.kt)("h4",{id:"textformat-field"},(0,i.kt)("inlineCode",{parentName:"h4"},"textFormat")," field"),(0,i.kt)("p",null,"This is an optional field that represents the interpretation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," field."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PlainText")," means it is plain text."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Markdown")," means it is a Markdown. The Markdown flavor is not specified so the rendering effect might be different depending on the library."),(0,i.kt)("p",null,"When decoding, the lack of content field should be treated as ",(0,i.kt)("inlineCode",{parentName:"p"},"TextFormat.PlainText")),(0,i.kt)("h3",{id:"typedmessagetuple"},(0,i.kt)("inlineCode",{parentName:"h3"},"TypedMessageTuple")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type TypedMessageTuple = [\n  type: TypedMessageTypeEnum.Tuple\n  metadata: Map | Nil,\n  items: Array<TypedMessageBase>,\n]\n")))}m.isMDXComponent=!0}}]);