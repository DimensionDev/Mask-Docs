"use strict";(self.webpackChunkmask_docs=self.webpackChunkmask_docs||[]).push([[476],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7764:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={author:"Jack-Works",maintainer:["Jack-Works","Septs"],sidebar_position:0},u="Overview",p={unversionedId:"plugin-infra/overview",id:"plugin-infra/overview",title:"Overview",description:"Setup",source:"@site/docs/plugin-infra/overview.md",sourceDirName:"plugin-infra",slug:"/plugin-infra/overview",permalink:"/docs/plugin-infra/overview",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugin-infra/overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{author:"Jack-Works",maintainer:["Jack-Works","Septs"],sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Plugin Infra",permalink:"/docs/category/plugin-infra"},next:{title:"Web3",permalink:"/docs/category/web3"}},s={},d=[{value:"Setup",id:"setup",level:2},{value:"Minimum File Structure",id:"minimum-file-structure",level:2},{value:"About <code>README.md</code> file",id:"about-readmemd-file",level:2},{value:"Plugin APIs",id:"plugin-apis",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Plugin state",id:"plugin-state",level:3},{value:"Metadata guide",id:"metadata-guide",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"overview"},"Overview"),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx gulp new-pkg\n")),(0,r.kt)("p",null,"To create a new plugin"),(0,r.kt)("h2",{id:"minimum-file-structure"},"Minimum File Structure"),(0,r.kt)("p",null,"The following folder is automatically created by the command above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"packages/mask/src/plugins/{your-plugin-name}\n\u251c\u2500\u2500 README.md           # see `README driven development`\n\u251c\u2500\u2500 index.ts            # Plugin registration\n\u251c\u2500\u2500 base.ts             # Basic definition of a plugin\n\u251c\u2500\u2500 constants.ts        # Constant definition, e.g: api end-point, etc\n\u251c\u2500\u2500 types.ts            # Provide common typing definitions\n\u251c\u2500\u2500 SNSAdaptor/index.ts # (Optional) Provide SNSAdaptor part of the plugin\n\u251c\u2500\u2500 Dashboard/index.ts  # (Optional) Provide Dashboard part of the plugin\n\u251c\u2500\u2500 Worker/index.ts     # (Optional) Provide Worker part of the plugin\n\u2514\u2500\u2500 utils.ts            # Provide common utils function\n")),(0,r.kt)("h2",{id:"about-readmemd-file"},"About ",(0,r.kt)("inlineCode",{parentName:"h2"},"README.md")," file"),(0,r.kt)("p",null,"see ",(0,r.kt)("a",{parentName:"p",href:"https://tom.preston-werner.com/2010/08/23/readme-driven-development.html"},"README driven development")),(0,r.kt)("p",null,"The file need to provide this information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Feature-set as TODOs"),(0,r.kt)("li",{parentName:"ul"},"Reference resource list"),(0,r.kt)("li",{parentName:"ul"},"Known issues / Caveats")),(0,r.kt)("h2",{id:"plugin-apis"},"Plugin APIs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Plugin definition: ",(0,r.kt)("inlineCode",{parentName:"li"},"packages/plugin-infra/src/types.ts")),(0,r.kt)("li",{parentName:"ul"},"Database: ",(0,r.kt)("inlineCode",{parentName:"li"},"context.getDatabaseStorage()")," (2nd parameter of the ",(0,r.kt)("inlineCode",{parentName:"li"},"init")," method of your ",(0,r.kt)("inlineCode",{parentName:"li"},"Worker")," definition). See example in ",(0,r.kt)("inlineCode",{parentName:"li"},"packages/plugins/example/src/Worker/index.ts"),"."),(0,r.kt)("li",{parentName:"ul"},"Message emitter: ",(0,r.kt)("inlineCode",{parentName:"li"},"createPluginMessage")," exported from ",(0,r.kt)("inlineCode",{parentName:"li"},"@masknet/plugin-infra")),(0,r.kt)("li",{parentName:"ul"},"RPC: ",(0,r.kt)("inlineCode",{parentName:"li"},"createPluginRPC")," exported from ",(0,r.kt)("inlineCode",{parentName:"li"},"@masknet/plugin-infra")),(0,r.kt)("li",{parentName:"ul"},"Metadata reader: ",(0,r.kt)("inlineCode",{parentName:"li"},"createTypedMessageMetadataReader")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"@masknet/shared-base")),(0,r.kt)("li",{parentName:"ul"},"React renderer with metadata reader: ",(0,r.kt)("inlineCode",{parentName:"li"},"createRenderWithMetadata")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"@masknet/shared-base"))),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,"The extension we talk about here is a bunch of code compiled and running in the Mask Network extension.\nThis plugin system is for decoupling purposes.\nIt doesn't allow load the new plugin dynamically without compiling the whole extension from the source code.\nIf you're looking for a dynamic plugin system,\nyou're probably looking for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DimensionDev/Maskbook/pull/2621"},"External plugin")," that still in the very early stage."),(0,r.kt)("h3",{id:"plugin-state"},"Plugin state"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Registered"),", the default state. The plugin has been registered in the plug-in registry."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Loaded"),", the deferred definition of the plugin has been loaded."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Activated"),", the plugin is activated in the current context.")),(0,r.kt)("p",null,"State transition:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Registered")," => ",(0,r.kt)("em",{parentName:"li"},"Loaded")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Loaded")," => ",(0,r.kt)("em",{parentName:"li"},"Activated")," (enable/start the plugin)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Activated")," => ",(0,r.kt)("em",{parentName:"li"},"Loaded")," (disable the plugin)")),(0,r.kt)("h2",{id:"metadata-guide"},"Metadata guide"),(0,r.kt)("p",null,"Metadata is JSON compatible data that's can be inserted into a post."),(0,r.kt)("p",null,"The most common use case of the metadata is the following."),(0,r.kt)("p",null,"Add a new entry in the composition dialogue, therefore,\nthe user can interact with your plugin. When it's finished,\nyou can insert your metadata into the post and it will be contained in the encrypted payload.\nWhen you see metadata in the post payload,\nyou should render some UI to reveal the information in the metadata and allow the user to interact with it."),(0,r.kt)("p",null,"Notice please treat the metadata you received as non trustable data,\nmake sure you have validated the formats and the data range.\nWe provided a utility to read the data from the post and validate it with JSON schema."))}m.isMDXComponent=!0}}]);